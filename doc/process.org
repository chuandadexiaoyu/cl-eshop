* Бизнес-процесс

** Общее описание процесса

   У нас существует несколько складов поставщиков, на которых
   находится товар. Мы закупаем товар у поставщиков, перемещаем его в
   пункты выдачи или прямо доставляем покупателю.

   Пользователь сайта (которым может быть юридическое или физическое
   лицо) выбирает и заказывает товар, оплачивает наличными,
   безналичным расчетом, по карте или с помощью платежной системы,
   забирает товар на пункте выдачи или получает его от службы
   доставки.

   В случае, если товар по какой-либо причине не доставлен
   пользователю мы возвращаем товар на склад.

   Мы отслеживаем перемещения товара, синхронизируем остатки,
   выставляем цены и анализируем продажи.


** Получение заказа

   Изначально мы считаем что нам известно актуальное состояние складов
   поставщиков. Поэтому на сайте мы отображаем только те товары,
   которые у нас есть в наличии. В результате пользователь не может
   заказать товар, которого у нас нет.

   Таким образом, мы можем получить заказ двумя путями:

   + менеджер разговаривает с клиентом по телефону и набивает заказ
     сразу в 1С

   + клиент сам находит товар на сайте, кладет его в корзину и
     покупает, оформляя заказ.

   Во втором случае сайт самостоятельно обращается к 1С и через
   *интерфейс взаимодействия* создает заказ (без участия менеджера)

   На случай сбоев соединения с 1С сайт поддерживает *очередь
   отправки* для отправляемых заказов и предпринимает попытки
   подключения до получения от интерфейса подтверждения о принятии
   заказа в обработку.

   В случае нескольких (сколько<?>) неудачных попыток в течение
   продолжительного времени заказ переходит в статус *недоставлено -
   сбой связи с 1С* о чем сообщает в лог (и возможно по sms
   разработчику)


** Прохождение заказа

   Получив заказ наша 1С разбивает его на товары и по ним формирует
   заказы к поставщикам, выбирая оптимального по *алгоритму выбора
   оптимального поставщика*. Сформировав заказы, 1С помещает их в
   *очередь отправки* и через нее отправляет заказы нашим
   поставщикам.

   При подключении иных поставщиков (у которых нет такой
   автоматизации) отправкой заказов из очереди занимается специально
   обученный менеджер.


** Резервирование товара на складе

   При получении заказа 1С наших поставщиков автоматически ставит товарные
   позиции в резерв, о чем посылает уведомительное сообщение, чтобы
   на сайте изменилось количество товара.

   Такое сообщение необходимо посылаеть каждый раз, когда количество
   свободных остатков на складах поставщиков изменяется


** Оплата


*** Для физ.лиц


**** Пост-оплата

     В случае, если мы осуществляем доставку Клиент отдает деньги
     курьеру, получает кассовый чек (обязательно), товарный чек (по
     требованию), гарантию (если на товар есть гарантия).

     Если клиент забирает с пункта выдачи - он отдает деньги работнику
     пункта выдачи и получает те же документы.



**** Балансовый счет

     Клиент после регистрации может зачислить на свой балансовый счет
     деньги, переведя их со счета в банке (банковской карты). Для
     каждого клиента мы ведем остатки на его счета (баланс)



*** Для юр.лиц

**** Предоплата по счету

     При покупке товара юр. лицом мы выписываем ему счет, который
     клиент клиент оплачивает до получаения товара.


**** Пост-оплата

     Пока не используется, есть специальный механизм, реализуемый с
     помощью менеджера отдела продаж.




** Доставка

*** Почтовым отправлением

    В зависимости от срочности и других параметров определяется
    стоимость доставки и транспортная компания. Клиент оплачивает
    почтовое отправление. На сайте он может выбрать транспортную
    компанию и вид почтового отправления, для этого мы должны иметь
    данные от каждой транспортной компании по времени доставки в
    каждое почтовое отделение - *почтовый каалькулятор*


*** Самовывоз

    Работник пункта выдачи отдает клиенту товар и забирает
    деньги.

    Если клиент не приходит за товаром - товар остается на пункте
    выдачи в течении *нескольких* дней, пока выясняется ситуация с
    клиентом - это отражается в трекинге. Потом товар может быть
    продан другому клиенту прямо со склада пункта выдачи или отправлен
    обратно на склад поставщика.


*** Доставка по адресу

    Осуществляется курьером, являющимся финансово-ответственным
    лицом. Курьер выписывает кассовый и если необходимо товарный чек и
    принимает оплату (возит с собой терминал, в случае оплаты по
    карте)

    В ряде случаев (например, если груз габаритный) доставку
    осуществляет водитель-экспедитор прямо со склада, не заезжая в
    пункт выдачи.


** TODO Возврат товара

   Процедура уточняется

*** TODO Отказ от товара


*** TODO Возврат товара в течение N дней

    По закону клиент может возвратить товар в течении двух недель...


*** TODO Частичный возврат


** Оформляемые документы

   Мы получили заказ с сайта. При небходимости данные заказа
   заполняются менеджером:

   [доставка : самовывоз]
   [доставка : на адрес]

   Если [доставка : самовывоз]: Водитель едет на склад и получает по
   паспорту документы: [счет-фактура], [транспортная товарная
   накладная] [доверенность] и [путевой лист]; потом забирает груз и
   едет в пункт выдачи. В пункте выдачи разгружается, ребята на пункте
   выдачи делают поступление на склад в 1С на основании [приходной
   накладной].

   Дальше водитель едет по адресам, маршрут планирует логист. Если на
   адресе оплата налом - клиент осматривает товар, расписывается в
   [путевом листе] или [заказ-наряде], получает товар, пробивает
   чек. Если безнал - то один чек клиенту, другой чек остается
   водителю, который он сдает в бухгалтерию. И отгрузочные документы
   [счет-фактура], [товарная накладная] [счет на оплату оригинал]
   водитель отдает покупателю, а от покупателя получает доверенность
   на основании которой он получает груз, которую привозит к нам.

   При безнале банк-клиент коннектится к 1С, а 1С должна сообщать на
   сайт об изменении статуса заказа.



   Сразу уведомляем клиента о том что его заказ на пункте, пусть
   забирает. Ставим таймер на [клиент : таймаут]

   Если [доставка : на адрес] - ...


   Истек [клиент : таймаут] - напоминаем клиенту о заказанном
   товаре. Ставим таймер на [возврат : не забрал]

   Истек [возврат : не забрал] - возвращаем товар обратно
   Документы: {расходная накладная возврата на основании приходной
   накладной}


** TODO Нештатные ситуации

*** Недоотгрузка на складе поставщика

    Если по внутренним причинам поставщика он не может отгрузить часть
    товарных позиций водителю экспедитору - об этом должна узнать наша
    1С (через механизм сообщений от 1С поставщика или по прямому
    звонку водителя-экспедитора нашему менеджеру), после чего она
    предпринимает попытки перезаказать товар у других поставщиков. В
    случае, если при этом сроки доставки подвергаются коррекции -
    запрашивается подтверждение операции у клиента.


*** TODO Потеря или повреждение товара

**** TODO На складе


**** TODO В пути


**** TODO На пункте выдачи


**** TODO Курьером


*** Потеря денег курьером или водителем-экспедитором

    Курьер или водитель-экспедитор несут материальную ответственность


** Мониторинг сбоев и отслеживание ошибок

*** Лог ошибок сайта

    Сайт ведет лог операций, по которому можно отследить прохождение
    каждого заказа. В случае, если возникают какие-то операционные или
    программные сбои - ошибки записываются в лог и анализируются
    постфактум техническим персоналом отвечающим за компонент, в
    котором произошла ошибка.


*** Ошибки обмена данными

    При обмене данными с поставщиками, каталогом TecDoc и другими
    агентами ведется лог операций. Если возникают ошибки - они
    записываются в лог, критические ошибки посылаются отвечающим за
    компонент программистам по электронной почте.


** TODO Трекинг

*** Трекинг заказа для клиента

    Клиент в своем личном кабинете может отслеживать перемещение всех
    позиций заказа. При доставке на пункт выдачи не всех позиций
    клиент может забрать и оплатить заказ частично.

    Трекинг вызывает подсистему sms-информирования для уведомления
    клиента о стадиях движения товара. Клиент может оформляя заказ
    указать о каких стадиях заказа он хочет получать уведомления.


*** Трекинг заказа для менеджера

    Осуществляется менеджером через 1С, включает информацию о
    разбиение заказа по поставщикам. О этапах прохождения заказа наша
    1С уведомляет сайт, для того чтобы обеспечить трекинг заказа для
    клиента.

    Трекинг предоставляет менеджеру информацию о складах, где
    находится товар.



** Схема потока данных "заказ"

   +------------------+           +-------------------+
   | Сайт             |           | 1С-Главная        |
   |  +-------------+ |           |   +-------------+ |
   |  | Очередь     | |           |   | Очередь     | |
   |  | отправки    +-+---Заказ--→|   | отправки    | |
   |  | заказов     | |           |   | заказов     | |
   |  | в 1С-RAVTA  | |     +-----|   | поставщикам | |
   |  +-------------+ |     |     |   +---+-------+-+ |
   +-+----------------+     |     +-------+-------+---+
     ↑                      |             |       |
     |                      |             |       |
  Остатки ------------------+             |       |
  Резервы                               Заказ     |
     |                                    |       |
     |   +----------------+               |       |
     |   | 1C-Поставщик-1 |               |     Заказ
     |   |                |←--------------+       |
     +---+                |                       |
     |   |                |  +----------------+   |
     |   +----------------+  | 1С-Поставщик-2 |   |
     |                       |                |←--+
     +-----------------------+                |
                             |                |
                             +----------------+


** Обмен данными

*** TODO Обмен данными с TecDoc

**** TODO Веб интерфейс TecDoc

**** TODO База данных TecDoc

**** TODO Обновление базы данных TecDoc


*** Полная файловая синхронизация баз данных 1С и сайта

    Делается слепок состояния исходной базы данных и он отправляется
    на целевую базу данных. Данные полностью перезаписываются.

    При большой номенклатуре процесс занимает длительное время и
    требует передачи больших объемов данных.


*** Инкрементальная синхронизация баз данных 1С и сайта

    Исходная и целевая базы обмениваясь служебными запросами определяют
    различающиеся группы и товары и пересылают только их, устраняя различие.


*** TODO Репликация средствами PostgreSql

*** TODO УРИБ

*** TODO Прямой запрос конкретного товара / группы через http

    + Целевая база может запросить конкретный товар или
      группу. Исходная база отправляет запрошенные данные.

    + Целевая база может запросить ветвь иерархии групп (по
      идентификатору группы) - исходная база отправляет данные по группам.






* TODO Специфика

** TODO Кроссы


** TODO Интеграция с TechDoc


** TODO Функционал


*** VIN-запрос



* Справочная информация

** Сущности

   Сущности в разрезе данных представляют собой файлы или записи в
   базе данных, в разрезе операций - объекты, над которыми
   производятся действия.


*** Товар

    Характеризуется главным образом наименованием и ценой, а также
    имеет дополнительные пользовательские характеристики. Уникально
    идентифицируется *артикулом* (уникальным кодом товара). Каждый
    товар должен быть связан с одной или несколькими группами, для
    чего в составе его полей хранится список *groups*.


*** Группа

    Список товаров, объединенных в группу. Например: "Масла и
    смазки". Группы организовываются в иерархическую сеть, для чего в
    составе полей группы хранится список *parents*. Специальный
    монитор целостности контролирует отсутствие циклов в иерархической
    сети.


*** Склад

    Конейнер для товаров, который отслеживает остатки по каждому
    товару. Для каждого поставщика мы ведем его собственный склад. С точки
    зрения перемещений пункт выдачи тоже может быть (а может и не быть)
    складом.


*** Заказ

    Набор товаров, заказанных пользователем. Заказ может собираться из
    разных складов и доставляться по частям. В процессе прохождения по
    этапам процесса заказ (или составляющие его товары) меняют свой
    статус. Возможные статусы?


*** Доставка

    Набор товаров, доставляемый пользователю за одну операцию. Может
    не совпадать с заказом.



** Действия

*** Регистрация пользователя


*** Зачисление денег на внутренний счет


*** Платеж с внутреннего счета


*** Оформление заказа

    Пользователь оформляет заказ на сайте, также от его имени может
    выступать наш менеджер, помогая ему оформить заказ.


*** Оплата

    Производится пользователем наличными в руки курьеру, картой на сайте,
    или с помощью средства оплаты: платежной системы или через банк.


*** Закупка

    Осуществляется закупщиком через 1С. При этом информация о закупке
    поступает на сайт для отслеживания сроков доставки


*** Перемещение

    Осуществляется логистом в 1С, сайт узнает о ней в момент совершения.


*** Доставка

    Производится водителем-экспедитором или курьером. Может быть неуспешной.


*** Возврат

    Происходит при неуспешной доставке, в этом случае водитель или курьер
    возвращает товар на наш склад.



** Участники и их задачи


*** Клиент


**** Найти сайт (seo)


**** Найти товар на сайте (поиск, фильтры)


**** Выбрать товар среди аналогичных и конкурирующих предложений (сравнение)


**** Создать заказ (страница продукта и группы)


**** Оплатить заказ (старинца оформления заказа)


**** Получить товары (трекинг, служба доставки)


*** Менеджер


**** Помочь пользователю с выбором (рабочее место менеджера)


**** Сформировать заказ за пользователя (рабочее место менеджера)


*** Работник склада


**** Отгрузить товар


**** Принять товар


**** Осуществить перемещение


*** Работник пункта выдачи


**** Получить товар от водителя-экспедитора


**** Отпустить товар клиенту


*** Водитель-экспедитор/курьер


**** Взять товар на складе


**** Доставить товар до другого склада или в пункт выдачи


**** Доставить товар клиенту


**** Вернуть товар на склад


*** Закупщик/логист


**** Закупить товар у поставщика


**** Сформировать задачу (документы) для водителя


**** Посмотреть состояние складов


**** Отслеживать состояние складов


*** Гарантийный менеджер


**** Разрешить спор с покупателем


*** Руководитель отдела продаж


**** Контроль выполненения задач

**** Найм сотрудников

**** Открытие филиалов

**** Финансово-экономический анализ


*** Генеральный директор


**** Планирование развития


**** Заключение договоров с поставщиками



* Архитектура

** TODO Компонентная модель


*** Хранилище данных


*** Интерфейс


*** Корзина


*** Авторизация


*** Разделение доступа



** TODO Шаблонизатор


** Асинхронные очереди сообщений - ZMQ

   1) под каждого пользователя делается отдельный эрланговый процесс
   2) процессы регистрируются в накопителе сообщений
   3) накопитель сообщений представляет из себя процесс с банальным
      списком сообщений
   4) клиентский хендлер умеет получать от клиента номер последнего
      полученного сообщения (erlang:now() гарантированно монотонно растет
      — прекрасный способ идентифицировать сообщения)
   5) накопитель умеет отдавать все сообщения старше нужного.
   6) старые сообщения со временем удаляются.

*** Альтернативы: RabbitMQ | Apache ActiveMQ | MemcacheQ

    ActiveMQ довольно непредсказуемо себя ведет, вешается, лочится и
    т.п. Отчасти помогает отключение сохранения сообщений, но только
    отчасти. Гугление проблем приводит к багам, которые не закрыты
    или не воспроизведены по несколько лет.

    RabbitMQ хорошо себя ведёт. ZMQ имеет биндинги под основные платформы.


** TODO Sms-информирование

** База данных - PostgreSql (для 1С и Сайта)

    PostgreSQL – открытая база данных, соответствующая стандартам
    SQL-99, имеющая богатый набор инструментов для повышения
    производительности. У нее многочисленное сообщество разработчиков,
    она имеет более свободную лицензию, в то время как ситуация с
    MySQL после смены владельца не очень понятна (хотя Oracle обещает
    развивать проект и даже планирует инвестировать в MySQL больше
    средств, чем это делала Sun Microsystems). MySQL хорош на плоских
    запросах с отключенными транзакциями, в то время как PostgreSQL
    может поддерживать более серьезную нагрузку и сложные запросы
    параллельно с записью в базу данных.

    Большим плюсом является наличие в PostgreSQL механизма MVCC
    (multi-version concurrency control).

    Это позволяет выполнять одновременно читающую и пишущую транзакцию
    в одной таблице без блокировки самой таблицы, а также откатывать
    неудачную транзакцию. В MySQL MVCC реализован частично (InnoDB) с
    ограничениями на производительность.

    Также сильно отличается механизм работы журнала транзакций. В
    PostgreSQL WAL (Write-Ahead Log) поддерживается атомарность на
    уровне событий в таблице. WAL позволяет откатить состояние объекта
    на произвольный момент времени. Такая транзакция называется
    физической или построчной, trigger-based, row-based. В MySQL
    транзакция принципиально иная – логическая (statement-based).


** Front-end сервер - nginx

   Выбираем его как стандарт "де-факто" в индустрии, за
   производительность и надежность.


** Back-end сервера

   В зависимости от требований выбираем разнообразные back-end
   решения. Для некоторых из них не требуется высокая
   производительность, но есть требования к используемой памяти
   и.т.п. Среди вариантов - apache, lighttpd, php-fast-cgi, Python
   Web Server Gateway Interface и другие в зависимости от компетенций
   ответственного разработчика и анализа преимуществ, недостатков и
   требований для решаемых этим сервером задач.


** Балансировка нагрузки

**** DNS-балансировщик

     Простейший метод распределения нагрузки, это балансировка с
     помощью DNS. Для распределения нагрузки достаточно указать два ip
     адреса для одного DNS-имени.

**** Common Address Redundancy Protocol

     Группе серверов назначается один адрес и в обычном режиме запросы
     обслуживаются ведущим сервером, но в случае аварии на главном сервере,
     ведомый сервер начинает принимать запросы на адрес ведущего
     сервера. Сервера должны находится в одном сегменте сети. Помимо
     обеспечения отказоустойчивостиб CARP позволяет реализовать
     балансировку нагрузки. В Linux поддержка CARP реализована с помощью
     стороннего модуля ядра.


** Кеширование

**** Memcached

     Кешируем в оперативной памяти все что не изменяется длительное
     время - статичные блоки на страницах, результаты запросов к базе
     данных и прочее.


** Внешний полнотекстовой поиск - Sphinx

** TODO Безопасность

**** TODO Модель угроз


**** TODO Риски



** TODO Цены и поставщики железа


**** Горячая замена


**** Балансировка


**** Дублирование


**** Виртуализация


** TODO Бэкапы

**** Ежедневный бэкап


**** Инкрементальный бэкап


**** Полномасштабный бэкап


** Нагрузоустойчивость

**** FrontEnd и BackEnd сервера

     Используем nginx в качестве front-end сервера, проксирующего
     запросы на back-end сервера.


**** Облачный хостинг статики

     Неизменяемые данные хостим в облачном сервисе, чтобы снять
     нагрузку с application-серверов.


**** Data Partitioning

     Крупные таблицы с данными разбиваются на несколько частей и
     разносится по нескольким узлам. При выполнении запроса к такой
     таблице определяется узел, на котором размещен выбираемый элемент
     и делается запрос к нему.


**** Балансировщик DNS


**** Балансировщик round-robin


**** Репликация ведущий-ведомый (Master-Slave Replication).

     Один ведущий узел асинхронно отсылает данные на ведомые узлы,
     работающие в режиме «только для чтения». Репликации на ведомые
     узлы могут выполняться как в синхронном, так и в асинхронном
     порядке. Вся пишущая нагрузка падает на ведущие узлы, все чтение
     должно идти на ведомые. Если ведущий узел останавливается, его
     может заменить ведомый. Этот тип репликации реализован в Slony-I
     (trigger-based replication), CommandPrompt Mammoth Replicator
     (Log-based replication), EnterpriseDB Replication Server
     (Trigger-based replication).


**** Master-Slave сервера БД

Master-Slave используется для создания бакапа, разгрузки мастера от
операций чтения и тем самым повышения скорости работы. На мастере и слейве данные немного расходятся
по времени на так называемый лаг репликации.


** Поток данных

**** TechDoc xml-requests


**** 1C SOAP requests


**** Прайс-листы (файлы и парсеры)


** Связи данных

**** TechDoc


**** 1C


** Данные продуктов


**** Какие поля продуктов у нас храняться


**** Какие поля мы получаем из TechDoc


**** Какие поля мы получаем из 1C


**** И как по ним искать?


** Иерархия групп


**** Множественная иерархия


**** Сохранение-восстановление иерархий


** Взаимодействие с 1С и TechDoc


**** Ситуации сценариев обмена данными


** Сценарии пользователя

**** Регистрация клиента

     После заполнения необходимых полей (уточнить список) клиент
     должен в автоматическом режиме появиться в 1С как
     контрагент. Идентификатор контрагента записывается в профиль
     клиента на сайте.

     Если клиент - юридическое лицо, то он должен заполнить
     необходимые для юр.лица поля: наименование, факт. адрес,
     ур. адрес, ИНН, КПП, БИК, название банка, корр.счет, расч.счет


**** Зачисление денег на счет клиента

     Физ.лицо может зачислить деньги из платежных систем, через
     терминал или перевести деньги со счета в банке (с банковской карты)

     Юр.лица может зачислить деньги только со счета в банке.


**** Поиск товара


**** Подбор по фильтрам



**** Подбор по VIN


**** Повтор заказа


**** Покупка


**** Покупка с консультацией менеджера


**** Отмена покупки


**** Подтверждение покупки


** Используемые технологии


*** AJAX


*** Jquery


*** Очереди сообщений



** Протоколы взаимодействия


*** Обмениваемся дампами таблиц


*** HTTP


*** XML или POST


*** Сжимать


*** Резать на небольшие кусочки


*** Гарантия доставки - опционально (подтверждение, перепосылка битых пакетов)



* Ресурсы

  Сколько стоят, сколько человек, кто за что отвечает, направления
  работы и задачи.

** Сисадмин


** Программисты


** Проектирование интерфейсов + Дизайн + Верстка (аутсорс)


* Развертывание


** Софтлист


** Сервер для разработки


** Сборочный процесс


** Управление доступом для разработчиков


** Багтрекер (следить за исправлением багов)


** Wiki для ведения документации по проекту


** Репозиторий кода и web-интерфейс к нему


** Cистема еженедельных бэкапов


